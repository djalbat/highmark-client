"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("juxtapose");
var _easywithstyle = /*#__PURE__*/ _interop_require_default(require("easy-with-style"));
var _easy = require("easy");
var _sufficient = require("sufficient");
var _fragmented = require("fragmented");
var _view = /*#__PURE__*/ _interop_require_default(require("./view"));
var _loading = /*#__PURE__*/ _interop_require_default(require("./view/div/loading"));
var _createMethods = /*#__PURE__*/ _interop_require_default(require("./createMethods"));
var _localStorage = require("./localStorage");
var _state = require("./state");
var _orientation = require("./utilities/orientation");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var renderStyles = _easywithstyle.default.renderStyles;
renderStyles();
(0, _localStorage.migratePersistentState)();
var scheduler = null, model = null, view = /*#__PURE__*/ React.createElement(_view.default, null), body = new _easy.Body();
_sufficient.controller.assignMethods(_createMethods.default, scheduler, model, view);
(0, _orientation.onOrientationChange)(function(orientation) {
    (0, _state.setOrientation)(orientation);
    view.updateZoom();
});
(0, _fragmented.onFragmentChange)(function(event, element, fragment) {
    var anchorId = "".concat(fragment);
    view.scrollToAnchor(anchorId);
});
(0, _orientation.getOrientation)(function(orientation) {
    var overlayHidden = (0, _state.isOverlayHidden)();
    (0, _state.setOrientation)(orientation);
    _loading.default.hide();
    body.mount(view);
    if (overlayHidden) {
        _sufficient.controller.hideOverlay();
        _sufficient.controller.showDivisions();
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBcImp1eHRhcG9zZVwiO1xuXG5pbXBvcnQgd2l0aFN0eWxlIGZyb20gXCJlYXN5LXdpdGgtc3R5bGVcIjsgIC8vL1xuXG5pbXBvcnQgeyBCb2R5IH0gZnJvbSBcImVhc3lcIjtcbmltcG9ydCB7IGNvbnRyb2xsZXIgfSBmcm9tIFwic3VmZmljaWVudFwiO1xuaW1wb3J0IHsgb25GcmFnbWVudENoYW5nZSB9IGZyb20gXCJmcmFnbWVudGVkXCI7XG5cbmltcG9ydCBWaWV3IGZyb20gXCIuL3ZpZXdcIjtcbmltcG9ydCBsb2FkaW5nRGl2IGZyb20gXCIuL3ZpZXcvZGl2L2xvYWRpbmdcIjtcbmltcG9ydCBjcmVhdGVNZXRob2RzIGZyb20gXCIuL2NyZWF0ZU1ldGhvZHNcIjtcblxuaW1wb3J0IHsgbWlncmF0ZVBlcnNpc3RlbnRTdGF0ZSB9IGZyb20gXCIuL2xvY2FsU3RvcmFnZVwiO1xuaW1wb3J0IHsgc2V0T3JpZW50YXRpb24sIGlzT3ZlcmxheUhpZGRlbiB9IGZyb20gXCIuL3N0YXRlXCI7XG5pbXBvcnQgeyBnZXRPcmllbnRhdGlvbiwgb25PcmllbnRhdGlvbkNoYW5nZSB9IGZyb20gXCIuL3V0aWxpdGllcy9vcmllbnRhdGlvblwiO1xuXG5jb25zdCB7IHJlbmRlclN0eWxlcyB9ID0gd2l0aFN0eWxlO1xuXG5yZW5kZXJTdHlsZXMoKTtcblxubWlncmF0ZVBlcnNpc3RlbnRTdGF0ZSgpO1xuXG5jb25zdCBzY2hlZHVsZXIgPSBudWxsLFxuICAgICAgbW9kZWwgPSBudWxsLFxuICAgICAgdmlldyA9XG5cbiAgICAgICAgPFZpZXcvPlxuXG4gICAgICAsXG4gICAgICBib2R5ID0gbmV3IEJvZHkoKTtcblxuY29udHJvbGxlci5hc3NpZ25NZXRob2RzKGNyZWF0ZU1ldGhvZHMsIHNjaGVkdWxlciwgbW9kZWwsIHZpZXcpO1xuXG5vbk9yaWVudGF0aW9uQ2hhbmdlKChvcmllbnRhdGlvbikgPT4ge1xuICBzZXRPcmllbnRhdGlvbihvcmllbnRhdGlvbik7XG5cbiAgdmlldy51cGRhdGVab29tKCk7XG59KTtcblxub25GcmFnbWVudENoYW5nZSgoZXZlbnQsIGVsZW1lbnQsIGZyYWdtZW50KSA9PiB7XG4gIGNvbnN0IGFuY2hvcklkID0gYCR7ZnJhZ21lbnR9YDtcblxuICB2aWV3LnNjcm9sbFRvQW5jaG9yKGFuY2hvcklkKTtcbn0pO1xuXG5nZXRPcmllbnRhdGlvbigob3JpZW50YXRpb24pID0+IHtcbiAgY29uc3Qgb3ZlcmxheUhpZGRlbiA9IGlzT3ZlcmxheUhpZGRlbigpO1xuXG4gIHNldE9yaWVudGF0aW9uKG9yaWVudGF0aW9uKTtcblxuICBsb2FkaW5nRGl2LmhpZGUoKTtcblxuICBib2R5Lm1vdW50KHZpZXcpO1xuXG4gIGlmIChvdmVybGF5SGlkZGVuKSB7XG4gICAgY29udHJvbGxlci5oaWRlT3ZlcmxheSgpO1xuXG4gICAgY29udHJvbGxlci5zaG93RGl2aXNpb25zKCk7XG4gIH1cbn0pO1xuIl0sIm5hbWVzIjpbInJlbmRlclN0eWxlcyIsIndpdGhTdHlsZSIsIm1pZ3JhdGVQZXJzaXN0ZW50U3RhdGUiLCJzY2hlZHVsZXIiLCJtb2RlbCIsInZpZXciLCJWaWV3IiwiYm9keSIsIkJvZHkiLCJjb250cm9sbGVyIiwiYXNzaWduTWV0aG9kcyIsImNyZWF0ZU1ldGhvZHMiLCJvbk9yaWVudGF0aW9uQ2hhbmdlIiwib3JpZW50YXRpb24iLCJzZXRPcmllbnRhdGlvbiIsInVwZGF0ZVpvb20iLCJvbkZyYWdtZW50Q2hhbmdlIiwiZXZlbnQiLCJlbGVtZW50IiwiZnJhZ21lbnQiLCJhbmNob3JJZCIsInNjcm9sbFRvQW5jaG9yIiwiZ2V0T3JpZW50YXRpb24iLCJvdmVybGF5SGlkZGVuIiwiaXNPdmVybGF5SGlkZGVuIiwibG9hZGluZ0RpdiIsImhpZGUiLCJtb3VudCIsImhpZGVPdmVybGF5Iiwic2hvd0RpdmlzaW9ucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7UUFFTztvRUFFZTtvQkFFRDswQkFDTTswQkFDTTsyREFFaEI7OERBQ007b0VBQ0c7NEJBRWE7cUJBQ1M7MkJBQ0k7Ozs7OztBQUVwRCxJQUFNLEFBQUVBLGVBQWlCQyxzQkFBUyxDQUExQkQ7QUFFUkE7QUFFQUUsSUFBQUEsb0NBQXNCO0FBRXRCLElBQU1DLFlBQVksTUFDWkMsUUFBUSxNQUNSQyxxQkFFRSxvQkFBQ0MsYUFBSSxTQUdQQyxPQUFPLElBQUlDLFVBQUk7QUFFckJDLHNCQUFVLENBQUNDLGFBQWEsQ0FBQ0Msc0JBQWEsRUFBRVIsV0FBV0MsT0FBT0M7QUFFMURPLElBQUFBLGdDQUFtQixFQUFDLFNBQUNDO0lBQ25CQyxJQUFBQSxxQkFBYyxFQUFDRDtJQUVmUixLQUFLVSxVQUFVO0FBQ2pCO0FBRUFDLElBQUFBLDRCQUFnQixFQUFDLFNBQUNDLE9BQU9DLFNBQVNDO0lBQ2hDLElBQU1DLFdBQVcsQUFBQyxHQUFXLE9BQVREO0lBRXBCZCxLQUFLZ0IsY0FBYyxDQUFDRDtBQUN0QjtBQUVBRSxJQUFBQSwyQkFBYyxFQUFDLFNBQUNUO0lBQ2QsSUFBTVUsZ0JBQWdCQyxJQUFBQSxzQkFBZTtJQUVyQ1YsSUFBQUEscUJBQWMsRUFBQ0Q7SUFFZlksZ0JBQVUsQ0FBQ0MsSUFBSTtJQUVmbkIsS0FBS29CLEtBQUssQ0FBQ3RCO0lBRVgsSUFBSWtCLGVBQWU7UUFDakJkLHNCQUFVLENBQUNtQixXQUFXO1FBRXRCbkIsc0JBQVUsQ0FBQ29CLGFBQWE7SUFDMUI7QUFDRiJ9